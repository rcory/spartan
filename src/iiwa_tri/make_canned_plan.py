
# Run me as: directorPython make_canned_plan.py --bot-config iiwaManip.cfg --director-config $SPARTAN_SOURCE_DIR/models/iiwa/director/director_config_dual_box_rot.json

import os
import math
import numpy as np

from director import lcmUtils
from director import mainwindowapp
from director import pydrakeik
from director import packagepath
from director import robotsystem
from director import roboturdf

import PythonQt

def makeRobotSystem(view):

    factory = robotsystem.ComponentFactory()
    factory.register(robotsystem.RobotSystemFactory)
    options = factory.getDisabledOptions()
    factory.setDependentOptions(options, usePlannerPublisher=True, useTeleop=True, useSegmentation=True, useSegmentationAffordances=True)
    robotSystem = factory.construct(view=view, options=options)

    # use pydrake ik backend
    ikPlanner = robotSystem.ikPlanner
    ikPlanner.planningMode = 'pydrake'
    ikPlanner.plannerPub._setupLocalServer()

    # set default options
    #robotSystem.playbackPanel.animateOnExecute = True
    ikPlanner.addPostureGoalListener(robotSystem.robotStateJointController)
    ikPlanner.getIkOptions().setProperty('Max joint degrees/s', 60)
    ikPlanner.getIkOptions().setProperty('Use pointwise', False)

    return robotSystem


packageMap = packagepath.PackageMap()
packageMap.populateFromSearchPaths(os.path.join(os.environ['SPARTAN_SOURCE_DIR'], 'models'))
roboturdf.addPathsFromPackageMap(packageMap)

# create a default mainwindow app
app = mainwindowapp.construct(globalsDict=globals())


view = PythonQt.dd.ddQVTKWidgetView()
robotSystem = makeRobotSystem(view)
#robotSystem = makeRobotSystem(None)

fields = robotSystem.ikPlanner.plannerPub.setupFields([], [], [])

theta_dega = 24
theta1a = theta_dega*math.pi/180
theta4a = (theta_dega+0)*math.pi/180

theta_degb = 28
theta1b = theta_degb*math.pi/180
theta4b = (theta_degb-4)*math.pi/180
theta5b = 10*math.pi/180

theta2 = 90*math.pi/180

# For the Home Depot Box.
# times = [0.000, 1.125, 2.250, 2.625, 3.375, 4.500, 5.625, 6.750, 7.750, 8.500, 9.625, 10.750, 11.875, 13.000, 14.125, 14.500, 15.250, 16.375, 17.500, 18.625, 19.625, 20.375, 21.500, 22.625, 23.750, 24.875]
# times=[x*1.0 for x in times] # multiply by 1.0 for the fastest version

 
# joints = [
#     [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000] + [0.000,0.000,0.000,0.000,0.000,0.000,3.000],
#     [0.000, 1.204, 0.000, -0.314, 0.000, 0.000, 0.000] + [0.000,2.007,-0.024,0.234,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.310,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.200,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [-0.524,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [-0.107,0.440,-0.024,-1.068,1.570,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.908,0.687,-1.068,-1.349,1.270,0.017,3.000],
#     [-0.392, 1.148, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.200, 1.148, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [0.200, 1.648, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.605, 1.763, 1.282, -0.427, -2.142, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.173, 1.790, 1.583, -0.248, -1.584, -0.084, 0.000] + [0.350,1.089,-0.071,-1.349,1.685,-0.030,3.000],
#     [0.000, 1.790, 1.583, -0.248, -1.584, -0.084, 0.000] + [0.000,1.089,-0.071,-1.349,1.685,-0.030,3.000],
#     [0.000, 1.204, 0.000, -0.314, 0.000, 0.000, 0.000] + [0.000,2.007,-0.024,0.234,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.310,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.200,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [-0.524,2.007,-0.025,0.236,0.000,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [-0.107,0.440,-0.024,-1.068,1.570,-0.269,3.000],
#     [-0.427, 1.261, 2.160, -0.256, -1.964, -0.084, 0.000] + [0.908,0.687,-1.068,-1.349,1.270,0.017,3.000],
#     [-0.392, 1.148, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.200, 1.148, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [0.200, 1.648, 2.160, 0.143, -1.964, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.605, 1.763, 1.282, -0.427, -2.142, -0.084, 0.000] + [0.462,0.653,-0.665,-1.408,1.270,-0.030,3.000],
#     [-0.173, 1.790, 1.583, -0.248, -1.584, -0.084, 0.000] + [0.350,1.089,-0.071,-1.349,1.685,-0.030,3.000],
#     [0.000, 1.790, 1.583, -0.248, -1.584, -0.084, 0.000] + [0.000,1.089,-0.071,-1.349,1.685,-0.030,3.000],
#     [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000] + [0.000,0.000,0.000,0.000,0.000,0.000,3.000],
# ];

# For the Amazon Foam box.
times = [0, 1.125, 2.25, 3.0, 4.075, 5.0, 6.5, 7.625, 8.625, 9.375, 10.5, 11.625, 12.2, 13.1]
times=[x*0.75 for x in times] # multiply by 1.0 for the fastest version

joints = [
    [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000] + [0.000,0.000,0.000,0.000,0.000,0.000,0.000],
    [-0.101, 1.340, 0.000, -0.314, -0.000, 0.000, 0.000] + [0.136,2.007,-0.024,0.234,-0.000,-0.269,3.000],
    [-0.455, 1.352, 2.174, -0.267, -2.012, -0.050, 0.034] + [0.305,2.008,-0.019,0.225,-0.037,-0.267,2.962],
    [-0.455, 1.352, 2.174, -0.269, -2.017, -0.046, 0.038] + [0.225,1.986,-0.019,0.226,-0.033,-0.262,2.975],
    [-0.455, 1.352, 2.173, -0.272, -2.013, -0.043, 0.035] + [-0.324,2.007,-0.025,0.236,0.000,-0.269,3.000],
    [-0.455, 1.352, 2.173, -0.272, -2.013, -0.043, 0.035] + [-0.107,0.440,-0.024,-1.068,1.570,-0.269,3.000],
    [-0.455, 1.352, 2.173, -0.272, -2.013, -0.043, 0.035] + [0.510,0.980,-0.522,-0.507,1.270,0.017,3.000],
    [-0.629, 1.269, 2.439, -0.096, -2.967, -0.096, 0.036] + [0.273,0.992,-0.273,-0.440,1.276,0.017,2.998],
    [0.024, 1.269, 2.439, -0.096, -2.966, -0.095, 0.034] + [0.273,0.992,-0.273,-0.440,1.276,0.017,2.998],
    [0.131, 1.680, 0.985, 0.121, -1.893, -0.095, 0.034] + [0.273,0.992,-0.273,-0.440,1.276,0.017,2.998],
    [-0.623, 1.680, 0.985, -0.557, -1.893, -0.095, 0.034] + [0.273,0.992,-0.273,-0.440,1.276,0.017,2.998],
    [-0.131, 1.613, 0.000, -0.314, 0.000, 0.000, 0.000] + [0.136,1.709,-0.024,0.234,0.000,-0.269,3.000],
    [-0.036, 1.613, 0.000, -0.314, 0.000, 0.000, -0.000] + [0.047,1.709,-0.024,0.234,0.000,-0.269,3.000],
    [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000] + [0.000,0.000,0.000,0.000,0.000,0.000,0.000],
];




full_joints = [[0,0,0,0,0,0] + q for q in joints]

msg = robotSystem.ikPlanner.plannerPub.makePlanMessage(full_joints, times, 1, fields)

#lcmUtils.publish('CANDIDATE_MANIP_PLAN', msg)
lcmUtils.publish('COMMITTED_ROBOT_PLAN', msg)

wait = raw_input('Press enter to continue')
